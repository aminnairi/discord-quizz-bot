[
    {
        "text": "Combien y-a-til de manière de déclarer une variable en JavaScript ?",
        "answers": [
            "3",
            "trois"
        ],
        "explanation": "Il existe trois manières de déclarer une variable en JavaScript : avec le mot-clé `var`, `let` et `const`. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#D%C3%A9clarations"
    },
    {
        "text": "Quel est l'inventeur du langage JavaScript ?",
        "answers": [
            "Brendan Eich"
        ],
        "explanation": "Le langage JavaScript a été inventé par Brendan Eich, co-fondateur du projet Mozilla, de la Mozilla Foundation et de la Mozilla Corporation. Plus d'info ici https://developer.mozilla.org/fr/docs/Apprendre/Commencer_avec_le_web/Les_bases_JavaScript"
    },
    {
        "text": "Est-ce que l'interpréteur JavaScript peut insérer des point-virgules pour moi lors de l'interprétation de mon code ?",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "En JavaScript, il existe un mécanisme appellé ASI — pour **A**utomatic **S**emicolon **I**nsertion — et qui permet d'insérer des points-virgules pour nous dans le code interprété selon certains critères. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Grammaire_lexicale#Insertion_automatique_de_points-virgules"
    },

    {
        "text": "Est-ce que le nom de variable suivant est un nom de variable valide en JavaScript ? `const answer' = 42`",
        "answers": [
            "non",
            "faux"
        ],
        "explanation": "Les variable en JavaScript suivent les mêmes règles que tous les identifieurs JavaScript qui doivent suivre des règles de nommage précises. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#Variables"
    },
    {
        "text": "Est-ce que les commentaires en JavaScript peuvent commencer par un dièse (`#`) ?",
        "answers": [
            "non",
            "faux"
        ],
        "explanation": "Les commentaires en JavaScript suivent les mêmes règles qu'en langage C. Plus d'infos ici https://developer.mozilla.org/fr/docs/Apprendre/Commencer_avec_le_web/Les_bases_JavaScript#Commentaires"
    },
    {
        "text": "Est-ce que l'opérateur `**` existe en JavaScript ?",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "L'opérateur `**` est un opérateur d'exponentiation et l'équivalent à `Math.pow()` qui permet d'élever une variable à une puissance donnée. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Opérateurs/Opérateurs_arithmétiques#Exponentiation"
    },
    {
        "text": "Est-ce la syntaxe suivante est correcte en JavaScript ?\n```javascript\n\"use strict\";\n\nconst languages = [ , , \"javascript\", , \"php\" ];\n```",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "Il est possible d'avoir plusieurs virgules à la suite pour avoir des cases d'un tableau non-définies. Cependant, pour des raisons de lisibilité, il est recommandé d'utiliser le mot-clé `undefined` à la place. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#Les_virgules_suppl%C3%A9mentaires"
    },
    {
        "text": "Combien de type de boucles existe-t-il en JavaScript (en dehors des méthodes `Array.prototypes.*` ?",
        "answers": [
            "cinq",
            "5"
        ],
        "explanation": "Il existe cinq types de boucles différents en JavaScript : `for`, `for...in`, `for...of`, `while` & `do...while`. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration"
    },
    {
        "text": "Est-il possible de compter le nombre d'arguments d'une fonction en JavaScript ?",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "Il est tout à fait possible de compter le nombre d'arguments d'une fonction en JavaScript en utilisant le mot-clé `arguments` à l'intérieur de la définition d'une fonction. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/arguments"
    },
    {
        "text": "Est-il possible d'avoir des types d'erreurs customisés en JavaScript ?",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "Il est tout à fait possible d'avoir des types d'erreurs, en plus des types par défaut comme `RangeError`, `TypeError` ou encore `EvalError`. Ces types d'erreurs personnalisés vont étendre des fonctionnalités proposées par l'erreur `Error` en JavaScript. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Error#Types_derreur_personnalisés"
    },
    {
        "text": "Quel est le résultat du code suivant\n```javascript\n[1, 2, 3].reduce((xs, x) => xs + x) // ?\n```",
        "answers": [
            "6",
            "six"
        ],
        "explanation": "Le code suivant revient à faire la somme de tous les éléments d'un tableau. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/reduce"
    },
    {
        "text": "Quel est le résultat du code suivant\n```javascript\n[1, 2, 3].reduce((xs, x) => xs + x, '') // ?\n```",
        "answers": [
            "123"
        ],
        "explanation": "Le code suivant revient à faire la concatenation de tous les éléments d'un tableau. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/reduce"
    },
    {
        "text": "Que renvoit le code suivant\n```javascript\n\"use strict\";\n\nconst brands = [];\n\nbrand[30] = \"Triumph\";\n\nconsole.log(brands.length); // ?\n```",
        "answers": [
            "31"
        ],
        "explanation": "La propriété `Array.prototype.length` est particulière car elle ne renvoit pas la taille réelle d'une tableau mais plutôt l'indice du plus grand élément d'un tableau plus un. Pour avoir sa taille rélle, l'astuce est de filtrer les éléments non-définis (`undefined`) et de calculer la taille du tableau ainsi filtré.\n```javascript\nconsole.log(brands.filter(Boolean).length); // 1\n```\n Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Collections_indexées#Comprendre_la_propriété_length"
    },
    {
        "text": "Est-ce qu'il est possible d'avoir des données privées à un objet (ou une instance de classe) en JavaScript ?",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "Depuis ECMAScript 2015, il est possible d'utiliser un objet `Symbol` qui permet d'avoir des références uniques, donc impossible à utiliser en dehors de l'implémentation. On peut aussi utiliser un objet `WeakMap`. En clair, il existe plusieurs manière de contourner ce problème dans un langage orienté prototypes. C'est l'équivalent du mot-clé `private` dans certains langages de programmation orientés objets. Plus d'infos sur cet article écrit par Nick Fitzgerald ici https://fitzgeraldnick.com/2014/01/13/hiding-implementation-details-with-e6-weakmaps.html"
    },
    {
        "text": "Que renvoit le code suivant\n```javascript\n\"use strict\";\n\n\nconst motorcycle1 = { brand: \"Triumph\" };\nconst motorcycle2 = { brand: \"Triumph\" };\n\nconsole.log(motorcycle1 === motorcycle2); // ?\n```",
        "answers": [
            "false"
        ],
        "explanation": "L'opérateur d'égalité entre deux objets ne compare pas le contenus des objets mais leur références. Tout objet, lorsqu'il est créé obtient une référence unique. La seule manière de faire marcher ce code est d'affecter à `motorcycle2` la référence de `motorcycle1` comme cela\n```javascript\nconst motorcycle2 = motorcycle1;\n```\nPlus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Utiliser_les_objets#Comparer_des_objets"
    },
    {
        "text": "En JavaScript, est-ce que Les promesses — ou *promises* en anglais — permettent de supprimer toutes les erreurs liées à l'éxécution d'une fonction ou d'une expression ?",
        "answers": [
            "non",
            "faux"
        ],
        "explanation": "Une promesse permet de différer l'exécution d'un code. Elle peut se résoudre — en cas de succès — ou échouer. Mais elle ne permet pas de supprimer ou de rendre silencieuses les erreurs et il faut toujours prévoir le cas d'erreur, que ce soit pour une promesse ou autre chose. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Utiliser_les_promesses"
    },
    {
        "text": "Est-ce que le code suivant est correct\n```javascript\n\"use strict\";\n\nconsole.log(Math.random(0, 10));\n```",
        "answers": [
            "non",
            "faux"
        ],
        "explanation": "La méthode `random` de l'objet `Math` renvoit un nombre entre `0` et `1`. Pour obtenir un nombre entre `0` et `10`, il aurait fallu écrit le code suivant\n```javascript\n\"use strict\";\n\nconsole.log(Math.random() * 10);\n```\nPlus d'infos ici https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Math/random"
    },
    {
        "text": "Que renvoit le code suivant\n```javascript\n\"use strict\";\n\nconsole.log(!!\"true\" === !!\"false\");\n```",
        "answers": [
            "true",
            "vrai"
        ],
        "explanation": "Aussi bizarre que cela puisse paraître, une chaîne de caractère est considéré comme vrai ou `true` — sauf pour une chaîne de caractère vide `\"\"` qui est considéré comme faux ou `false`. Plus d'infos ici https://developer.mozilla.org/fr/docs/Glossaire/Falsy et ici https://developer.mozilla.org/fr/docs/Glossaire/Truthy"
    },
    {
        "text": "Est-ce que le code suivant est correct\n```javascript\n\"use strict\"\n\n<!-- on vérifie que 1 et 1 font 2 -->\n\nconsole.log(1 + 1 === 2);\n```",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "Et oui ! On peut mettre des commentaires HTML en JavaScript ! Et il font partie de la spécification ECMAScript depuis l'époque des navigateurs comme Netscape qui ne supportait pas encore la balise `<script>`. Plus d'infos ici (attention, long document, spécification complète) https://www.ecma-international.org/ecma-262/#sec-html-like-comments"
    },
    {
        "text": "Est-ce que la balise suivante existe en HTML ?\n```html\n<address>\n```",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "La balise `<address>` permet d'indiquer de façon sémantique des informations sur une personne physique ou morale ou un ensemble de ces derniers. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/HTML/Element/address"
    },
    {
        "text": "Est-ce que la balise suivante existe en HTML ?\n```html\n<wbr>\n```",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "La balise `<wbr>` permet d'indiquer un endroit où casser un mot si un mot devait être cassé, par exemple dans le cas d'un design responsive. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/HTML/Element/wbr"
    },
    {
        "text": "Est-ce que la balise suivante existe en HTML ?\n```html\n<javascript>\n```",
        "answers": [
            "non",
            "faux"
        ],
        "explanation": "Il n'existe pas de balise `<javascript>` en HTML. Pour pouvoir utiliser du JavaScript, il faut utiliser la balise `<script>`. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/HTML/Element/script"
    },
    {
        "text": "Est-ce que la balise suivante existe en HTML ?\n```html\n<template>\n```",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "Même si elle est utilisé par des frameworks comme Vue, cette balise existe belle et bien et permet de définir du contenu HTML qui ne sera pas rendu par le navigateur mais généralement réutilisé par la suite en JavaScript pour créer du marquage HTML facilement réutilisable. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/HTML/Element/template"
    },
    {
        "text": "Le concept de DOM virtuel est un concept lié aux framework JavaScript comme React, Angular ou Vue est n'existe pas en HTML.",
        "answers": [
            "faux",
            "non"
        ],
        "explanation": "Même si le concept de DOM virtuel est lié à la plupart des frameworks JavaScript, ce concept existe bel et bien et est utilisé pour créer des Web Components, des composants HTML standards dedans lesquels il est possible d'encapsuler du HTML, CSS & JavaScript et de le rendre portable (haute portabilité et réutilisabilité). Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/Web_Components/Using_shadow_DOM"
    },
    {
        "text": "Il n'y a pas besoin de concevoir from scratch un color picker car il existe un élément HTML qui permet d'afficher un color picker à l'utilisateur.",
        "answers": [
            "vrai",
            "oui"
        ],
        "explanation": "Aussi dingue que cela puisse paraître, il existe bel et bien un élément HTML qui permet d'offrir à l'utilisateur un color picker sans avoir besoin de le concevoir nous-mêmes (il est quand même bon de noter que ce dernier est assez sommaire en terme de fonctionnalités). Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/HTML/Element/Input/color"
    },
    {
        "text": "Je suis obligé de passer par un framework JavaScript si je veux une liste déroulante composées d'entrées groupées par thèmes.",
        "answers": [
            "faux",
            "non"
        ],
        "explanation": "Il est possible d'utiliser la balise `<optgroup>` pour grouper plusieurs éléments logiques entre-eux dans une liste déroulante (`<select>`). Cela peut se révéler très pratique et ne nécessite pas de passer par un framework ou d'utiliser des balises non-sémantiques particulières. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/HTML/Element/Optgroup"
    },
    {
        "text": "En HTML, il existe une balise `<script>` qui permet d'utiliser le JavaScript mais il existe aussi une balise `<noscript>` qui de détecter dynamiquement si le JavaScript est désactivé sur une page HTML.",
        "answers": [
            "vrai",
            "oui"
        ],
        "explanation": "Non seulement cette balise existe et est souvent utilisée pour afficher un message à l'utilisateur lorsque celui-ci a décidé de désactiver l'exécution de scripts sur sa page, mais c'est également un des critères de l'outil d'audit de site disponible sur l'outil de test de site Web de Google qui recommande d'utiliser cette balise lorsque l'on décide d'utiliser un système de Service Workers. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/HTML/Element/noscript"
    },
    {
        "text": "JSX est un langage de marquage issue de la rencontre entre le JavaScript et l'XML et qui permet de remplacer complètement le langage HTML.",
        "answers": [
            "faux",
            "non"
        ],
        "explanation": "Le JSX — **J**ava**S**cript and **X**ML — est un langage de marquage qui s'utilise dans des scripts, mais n'a pas pour vocation de remplacer complètement les documents HTML puisqu'il nécessite le langage JavaScript pour exister. Plus d'infos ici https://fr.reactjs.org/docs/introducing-jsx.html"
    },
    {
        "text": "En HTML, si j'oublie la déclaration `<DOCTYPE html>` au début de mon document, le navigateur pensera que mon site est écrit pour Internet Explorer 9 et inférieur et entrera dans un mode spécial d'interpétation du HTML.",
        "answers": [
            "vrai",
            "oui"
        ],
        "explanation": "Le DOCTYPE est un élément important d'une page HTML puisqu'il permet de donner au navigateur l'assurance que notre marquage est écrit pour être compatible selon le standard HTML. Plus d'infos ici https://developer.mozilla.org/fr/docs/Web/HTML/Quirks_Mode_and_Standards_Mode"
    },
    {
        "text": "Que signifie PHP ?",
        "answers": [
            "Programming Home Pages"
        ],
        "explanation": "Le langage PHP a été créé en 1994 par Rasmus Lerdorf pour son site web. C'était à l'origine une bibliothèque logicielle en C8 dont il se servait pour conserver une trace des visiteurs qui venaient consulter son CV. Au fur et à mesure qu'il ajoutait de nouvelles fonctionnalités, Rasmus a transformé la bibliothèque en une implémentation capable de communiquer avec des bases de données et de créer des applications dynamiques et simples pour le Web. Rasmus a alors décidé, en 1995, de publier son code, pour que tout le monde puisse l'utiliser et en profiter. PHP s'appelait alors PHP/FI (pour Personal Home Page Tools/Form Interpreter). En 1997, deux étudiants, Andi Gutmans et Zeev Suraski, ont redéveloppé le cœur de PHP/FI. Ce travail a abouti un an plus tard à la version 3 de PHP, devenu alors PHP: Hypertext Preprocessor. Peu de temps après, Andi Gutmans et Zeev Suraski ont commencé la réécriture du moteur interne de PHP. C’est ce nouveau moteur, appelé Zend Engine — le mot Zend est la contraction de Zeev et Andi — qui a servi de base à la version 4 de PHP"
    },
    {
        "text": "Que renvoit ce code en PHP\n```php\n<?php\n\ndeclare(use_strict=1);\n\n[$a, $a] = [1, 2, 3, 4];\n\necho $a; // ?\n```",
        "answers": [
            "2",
            "deux"
        ],
        "explanation": "En PHP, il est possible de déconstruire un tableau comme en JavaScript pour ne récupérer que tout ou partie de ce tableau. Lorsqu'une variable existe est réaffecter, elle voit sa valeur précédente écrasée par la nouvelle. Plus d'infos ici https://www.php.net/manual/fr/language.operators.assignment.php et ici https://www.php.net/manual/fr/migration71.new-features.php"
    },
    {
        "text": "Que renvoit ce code en PHP\n```php\n<?php\n\ndeclare(use_strict=1);\n\nconst NUMBERS = [1.1, 2.2, 3.3];\n\nif (in_array(\"1.10\", NUMBERS)) {\n    echo \"oui\";\nelse {\n    echo \"non\";\n}\n```",
        "answers": [
            "oui",
            "vrai"
        ],
        "explanation": "En PHP, La fonction `in_array` revient à utiliser une boucle for pour itérer sur tous les éléments du tableau et de les comparer à notre paramètre de recherche. En PHP il est possible de comparer deux éléments de types différents mais de valeurs similaires. Plus d'infos ici https://www.php.net/manual/fr/language.operators.comparison.php"
    },
    {
        "text": "Quelle fonction PHP retourne le nombre de secondes écoulées depuis le 1er janvier 1970 ?",
        "answers": [
            "time"
        ],
        "explanation": "time() retourne l'heure courante, mesurée en secondes depuis le début de l'époque UNIX, (1er janvier 1970 00:00:00 GMT)."
    },
    {
        "text": "Quelle fonction PHP permet d'envoyer des en-têtes HTTP au navigateur avant le contenu de la page ?",
        "answers": [
            "header"
        ],
        "explanation": "header() permet de spécifier l'en-tête HTTP string lors de l'envoi des fichiers HTML. Reportez-vous à » HTTP/1.1 Specification pour plus d'informations sur les en-têtes HTTP."
    }
]
